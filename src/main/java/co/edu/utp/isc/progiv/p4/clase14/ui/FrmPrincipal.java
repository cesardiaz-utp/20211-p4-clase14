/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package co.edu.utp.isc.progiv.p4.clase14.ui;

import co.edu.utp.isc.progiv.p4.clase14.excepciones.FaltanValoresException;
import co.edu.utp.isc.progiv.p4.clase14.excepciones.FormatoErroneoException;
import co.edu.utp.isc.progiv.p4.clase14.modelo.Grupo;
import co.edu.utp.isc.progiv.p4.clase14.modelo.Libreta;
import co.edu.utp.isc.progiv.p4.clase14.modelo.Persona;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

/**
 *
 * @author cdiaz
 */
public class FrmPrincipal extends javax.swing.JFrame {

    private Libreta libreta;
    private LibretaTableModel tableModel;

    /**
     * Creates new form FrmPrincipal
     */
    public FrmPrincipal() {
        initComponents();
        iniciarLibreta();

        setSize(800, 600);
        setLocationRelativeTo(null);
        // setExtendedState(MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        javax.swing.ButtonGroup btnGrpEstado = new javax.swing.ButtonGroup();
        javax.swing.JPanel jPanel1 = new javax.swing.JPanel();
        javax.swing.JLabel jLabel1 = new javax.swing.JLabel();
        txtIdentificacion = new javax.swing.JTextField();
        javax.swing.JLabel jLabel5 = new javax.swing.JLabel();
        cmbGrupo = new javax.swing.JComboBox<>();
        javax.swing.JLabel jLabel2 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        javax.swing.JLabel jLabel3 = new javax.swing.JLabel();
        txtDireccion = new javax.swing.JTextField();
        javax.swing.JLabel jLabel4 = new javax.swing.JLabel();
        javax.swing.JPanel jPanel3 = new javax.swing.JPanel();
        rdActivo = new javax.swing.JRadioButton();
        rdInactivo = new javax.swing.JRadioButton();
        btnGuardar = new javax.swing.JButton();
        javax.swing.JScrollPane jScrollPane1 = new javax.swing.JScrollPane();
        tblLibreta = new javax.swing.JTable();
        javax.swing.JPanel jPanel2 = new javax.swing.JPanel();
        btnNuevo = new javax.swing.JButton();
        javax.swing.JSeparator jSeparator1 = new javax.swing.JSeparator();
        btnEliminar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Libreta de Personas");

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWidths = new int[] {0, 5, 0, 5, 0, 5, 0};
        jPanel1Layout.rowHeights = new int[] {0, 5, 0, 5, 0, 5, 0, 5, 0};
        jPanel1.setLayout(jPanel1Layout);

        jLabel1.setText("Identificación *");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 0, 0);
        jPanel1.add(jLabel1, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(txtIdentificacion, gridBagConstraints);

        jLabel5.setText("Grupo *");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        jPanel1.add(jLabel5, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 5);
        jPanel1.add(cmbGrupo, gridBagConstraints);

        jLabel2.setText("Nombre *");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel2, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(txtNombre, gridBagConstraints);

        jLabel3.setText("Direccion");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel3, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(txtDireccion, gridBagConstraints);

        jLabel4.setText("Estado *");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        jPanel1.add(jLabel4, gridBagConstraints);

        jPanel3.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

        btnGrpEstado.add(rdActivo);
        rdActivo.setSelected(true);
        rdActivo.setText("Activo");
        jPanel3.add(rdActivo);

        btnGrpEstado.add(rdInactivo);
        rdInactivo.setText("Inactivo");
        jPanel3.add(rdInactivo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        jPanel1.add(jPanel3, gridBagConstraints);

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.gridwidth = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 5);
        jPanel1.add(btnGuardar, gridBagConstraints);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        tblLibreta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblLibreta);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        btnNuevo.setText("Nuevo");
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel2.add(btnNuevo);

        jSeparator1.setPreferredSize(new java.awt.Dimension(40, 0));
        jPanel2.add(jSeparator1);

        btnEliminar.setText("Eliminar");
        btnEliminar.setEnabled(false);
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel2.add(btnEliminar);

        getContentPane().add(jPanel2, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        limpiarCampos();
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        int row = tblLibreta.getSelectedRow();
        if (row != -1) {
            if (JOptionPane.YES_OPTION == JOptionPane.showConfirmDialog(this,
                    "¿Está seguro que desea eliminar esta persona?",
                    getTitle(), JOptionPane.QUESTION_MESSAGE)) {

                Persona p = tableModel.getDato(row);
                libreta.eliminarPersona(p);
                
                tableModel.actualizarDatos();
                
                JOptionPane.showMessageDialog(this, "Persona eliminada exitosamente!",
                        getTitle(), JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        try {
            // Validar campos obligatorios
            libreta.agregarPersona(obtenerPersonaDeCampos());

            // Actualizo los atos en la tabla
            tableModel.actualizarDatos();

            JOptionPane.showMessageDialog(this, "Persona guardada exitosamente!",
                    getTitle(), JOptionPane.ERROR_MESSAGE);
        } catch (FaltanValoresException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage(), getTitle(), JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JComboBox<Grupo> cmbGrupo;
    private javax.swing.JRadioButton rdActivo;
    private javax.swing.JRadioButton rdInactivo;
    private javax.swing.JTable tblLibreta;
    private javax.swing.JTextField txtDireccion;
    private javax.swing.JTextField txtIdentificacion;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables

    private void iniciarLibreta() {
        libreta = new Libreta();

        // Llenar datos de la lista de grupos
        cmbGrupo.removeAllItems();
        libreta.getGrupos()
                .forEach(grupo -> {
                    cmbGrupo.addItem(grupo);
                });
        cmbGrupo.setSelectedIndex(-1);

        // Si hay personas en libreta , llena la lista de personas
        tableModel = new LibretaTableModel(libreta.getPersonas());
        tblLibreta.setModel(tableModel);

        // Inicializar la escucha de la seleccion en la tabla
        tblLibreta.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tblLibreta.getSelectionModel().addListSelectionListener((ListSelectionEvent e) -> {
            int row = tblLibreta.getSelectedRow();
            if (row == -1) {
                limpiarCampos();
            } else {
                cargarCampos(tableModel.getDato(row));
            }
            btnEliminar.setEnabled(row != -1);
        });
    }

    private void limpiarCampos() {
        // 1. Limpiar campos del formulario
        txtIdentificacion.setText("");
        cmbGrupo.setSelectedIndex(-1);
        txtNombre.setText("");
        txtDireccion.setText("");
        rdActivo.setSelected(true);

        // 2. Limpiar la seleccion de la tabla
        tblLibreta.clearSelection();

        // 3. Dar el foco al campo para empezar a digitar
        txtIdentificacion.requestFocus();
    }

    private void cargarCampos(Persona persona) {
        // 1. Limpiar campos del formulario
        txtIdentificacion.setText(persona.getIdentificacion().toString());
        cmbGrupo.setSelectedItem(persona.getGrupo());
        txtNombre.setText(persona.getNombre());
        txtDireccion.setText(persona.getDireccion() == null ? "" : persona.getDireccion());
        (persona.getEstado() ? rdActivo : rdInactivo).setSelected(true);

        // 2. Dar el foco al campo para empezar a digitar
        txtIdentificacion.requestFocus();
    }

    private Persona obtenerPersonaDeCampos() throws FaltanValoresException {
        // Valido los campos
        if (txtIdentificacion.getText().isBlank()) {
            throw new FaltanValoresException("La 'Identificación' es un campo obligatorio");
        }
        if (!txtIdentificacion.getText().trim().matches("[0-9]+")) {
            throw new FormatoErroneoException("La 'Identificación' tiene caracteres inválidos");
        }
        if (cmbGrupo.getSelectedIndex() == -1) {
            throw new FaltanValoresException("El 'Grupo' es un campo obligatorio");
        }
        if (txtNombre.getText().isBlank()) {
            throw new FaltanValoresException("El 'Nombre' es un campo obligatorio");
        }

        return new Persona(Long.valueOf(txtIdentificacion.getText().trim()),
                cmbGrupo.getItemAt(cmbGrupo.getSelectedIndex()),
                txtNombre.getText().trim(),
                txtDireccion.getText().trim(),
                rdActivo.isSelected());
    }
}
